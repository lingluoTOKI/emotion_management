#!/usr/bin/env python3
"""
配置文件生成脚本
Configuration File Generation Script
"""

import json
import os
import sys
from pathlib import Path

def load_mysql_config():
    """加载MySQL配置"""
    config_file = Path(__file__).parent / 'mysql_config.json'
    if config_file.exists():
        with open(config_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

def generate_env_config(mysql_config=None):
    """生成.env配置文件"""
    # 默认配置
    config = {
        'MYSQL_HOST': 'localhost',
        'MYSQL_PORT': '3306',
        'MYSQL_ROOT_USER': 'root',
        'MYSQL_ROOT_PASSWORD': '',
        'DATABASE_NAME': 'emotion_management',
        'DATABASE_USER': 'emotion_user',
        'DATABASE_PASSWORD': 'emotion123',
        'DATABASE_URL': 'mysql://emotion_user:emotion123@localhost/emotion_management',
        'REDIS_HOST': 'localhost',
        'REDIS_PORT': '6379',
        'REDIS_DB': '0',
        'REDIS_URL': 'redis://localhost:6379/0',
        'APP_NAME': '情绪管理系统',
        'APP_VERSION': '1.0.0',
        'DEBUG': 'false',
        'HOST': '0.0.0.0',
        'PORT': '8000',
        'SECRET_KEY': 'your-secret-key-here-change-this-in-production',
        'ALGORITHM': 'HS256',
        'ACCESS_TOKEN_EXPIRE_MINUTES': '30',
        'OPENAI_API_KEY': '',
        'OPENAI_MODEL': 'gpt-3.5-turbo',
        'SPEECH_RECOGNITION_LANGUAGE': 'zh-CN',
        'RISK_THRESHOLD': '0.7',
        'LOG_LEVEL': 'DEBUG',
        'LOG_FILE': 'logs/app.log',
        'UPLOAD_DIR': 'uploads',
        'MAX_FILE_SIZE': '10485760',
        'ALLOWED_ORIGINS': 'http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000,http://127.0.0.1:3001'
    }
    
    # 如果提供了MySQL配置，则更新相关配置
    if mysql_config:
        config.update({
            'MYSQL_HOST': mysql_config.get('mysql_host', 'localhost'),
            'MYSQL_PORT': str(mysql_config.get('mysql_port', 3306)),
            'MYSQL_ROOT_USER': mysql_config.get('mysql_root_user', 'root'),
            'MYSQL_ROOT_PASSWORD': mysql_config.get('mysql_root_password', ''),
            'DATABASE_NAME': mysql_config.get('database_name', 'emotion_management'),
            'DATABASE_USER': mysql_config.get('database_user', 'emotion_user'),
            'DATABASE_PASSWORD': mysql_config.get('database_password', 'emotion123'),
        })
        
        # 生成DATABASE_URL
        db_url = f"mysql://{config['DATABASE_USER']}:{config['DATABASE_PASSWORD']}@{config['MYSQL_HOST']}/{config['DATABASE_NAME']}"
        config['DATABASE_URL'] = db_url
    
    return config

def write_env_file(config, output_path):
    """写入.env文件"""
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write("# 情绪管理系统配置文件\n")
        f.write("# Emotion Management System Configuration\n")
        f.write("# 此文件由 generate_config.py 自动生成\n")
        f.write("# This file is auto-generated by generate_config.py\n\n")
        
        # 按分类写入配置
        sections = {
            'MySQL数据库配置': [
                'MYSQL_HOST', 'MYSQL_PORT', 'MYSQL_ROOT_USER', 'MYSQL_ROOT_PASSWORD'
            ],
            '应用数据库配置': [
                'DATABASE_NAME', 'DATABASE_USER', 'DATABASE_PASSWORD', 'DATABASE_URL'
            ],
            'Redis配置': [
                'REDIS_HOST', 'REDIS_PORT', 'REDIS_DB', 'REDIS_URL'
            ],
            '应用配置': [
                'APP_NAME', 'APP_VERSION', 'DEBUG', 'HOST', 'PORT'
            ],
            'JWT配置': [
                'SECRET_KEY', 'ALGORITHM', 'ACCESS_TOKEN_EXPIRE_MINUTES'
            ],
            'AI配置': [
                'OPENAI_API_KEY', 'OPENAI_MODEL'
            ],
            '语音识别配置': [
                'SPEECH_RECOGNITION_LANGUAGE'
            ],
            '风险评估配置': [
                'RISK_THRESHOLD'
            ],
            '日志配置': [
                'LOG_LEVEL', 'LOG_FILE'
            ],
            '文件上传配置': [
                'UPLOAD_DIR', 'MAX_FILE_SIZE'
            ],
            'CORS配置': [
                'ALLOWED_ORIGINS'
            ]
        }
        
        for section_name, keys in sections.items():
            f.write(f"\n# {section_name}\n")
            for key in keys:
                if key in config:
                    value = config[key]
                    f.write(f"{key}={value}\n")

def update_backend_config(config):
    """更新后端配置文件"""
    backend_config_path = Path(__file__).parent.parent / 'backend' / 'app' / 'core' / 'config.py'
    
    if not backend_config_path.exists():
        print(f"警告：未找到后端配置文件 {backend_config_path}")
        return False
    
    # 读取现有配置
    with open(backend_config_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 更新数据库URL
    old_url = 'DATABASE_URL: str = "mysql://emotion_user:emotion123@localhost/emotion_management"'
    new_url = f'DATABASE_URL: str = "{config["DATABASE_URL"]}"'
    
    if old_url in content:
        content = content.replace(old_url, new_url)
        
        # 写回文件
        with open(backend_config_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"✓ 已更新后端配置文件: {backend_config_path}")
        return True
    else:
        print(f"⚠ 未找到需要更新的数据库URL配置")
        return False

def main():
    """主函数"""
    print("=" * 60)
    print("配置文件生成脚本")
    print("Configuration File Generation Script")
    print("=" * 60)
    
    # 加载MySQL配置
    mysql_config = load_mysql_config()
    if mysql_config:
        print("✓ 找到MySQL配置，将使用检测到的设置")
    else:
        print("⚠ 未找到MySQL配置，将使用默认设置")
    
    # 生成配置
    config = generate_env_config(mysql_config)
    
    # 确定输出路径
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    # 生成.env文件到项目根目录
    env_path = project_root / '.env'
    write_env_file(config, env_path)
    print(f"✓ 已生成配置文件: {env_path}")
    
    # 生成.env文件到database目录
    db_env_path = script_dir / 'config.env'
    write_env_file(config, db_env_path)
    print(f"✓ 已生成配置文件: {db_env_path}")
    
    # 更新后端配置
    update_backend_config(config)
    
    print("\n" + "=" * 60)
    print("配置生成完成!")
    print("=" * 60)
    print("\n重要提醒：")
    print("1. 请检查生成的配置文件，确保数据库连接信息正确")
    print("2. 生产环境请修改 SECRET_KEY 为安全的随机字符串")
    print("3. 如需使用AI功能，请设置 OPENAI_API_KEY")
    print("4. 配置文件已保存到以下位置：")
    print(f"   - {env_path}")
    print(f"   - {db_env_path}")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
